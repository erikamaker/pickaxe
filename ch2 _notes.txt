Chapter 2 gave an overview of object-oriented programming. In programming, an object is something that combines data with logic that can manipulate that data. 

A language is considered oriented towards objects if it facilitates the creation of them. The data and behavior is modeled on real life abstraction, including personal domains of logic. For instance, my game is modeled off of tabletop adventure games like Dungeons and Dragons: it has a class hierarchy, with a parent class Gameboard that holds the game's data (probably too much and in need of refactoring), and interactable gamepiece instances that hold their own logic. 

I learned that "object" and "instance" are often used interchangeably. In this way, it's not wrong to say that `sturdy_lockpick` is a `Lockpick` object, as it's instantiated from it (which is itself a subclass of `Gamepiece', a subclass of `Gameboard`). I also learned that instances are created by calling a 'constructor' method, which is the method I use everytime I instantiate an object. For example, `sturdy_lockpick` only exists because I call `Lockpick.new` (where 'new' is the constructor). The return value reflects the data built into its class, such as unique instance variables / instance methods, or more widely shared class data. The new Lockpick gets its own object ID.

An instance method is a chunk of functional behavior unique to the instance object. It can be called within the class definition, as well as outside the class. In my game engine, I conflated instance variables and instance methods, causing unexpected behavior. I had written an instance method that defined `@profile`, thinking that this variable could mutate over time as if it was defined at construction. However, since I didn't define the instance variable at initialization, the instance method was overwriting the instance variable (in my case was just `=> {}` until the method took over).

I've learned that the instance method has ACCESS to instance variable data, but it does not OWN that data's state. It can define it statically (or it can read what instance variables are already defined, such as during the instance's construction). By using `:attr_accessor` and defining the instance variable `@profile` at initialization, I'm able to both access and change that value. Unlike the data in the instance method that I'd first made, the instance variable `@profile` is mutable, because it does more than simply execute behavior that points to a saved repeated value every time. 

Methods are invoked using the dot operator. For instance, checking the number of forged locks in a `Lockpick` class with an appropriately written method could be called with the same syntax as the constructor method above: `Lockpick.number_forged'. The left side of this dot is the receiving object, where the dot is passing the method behavior invoked on the right. There are infinite methods that can be written. Other examples could include a singleton `"Count the characters".length`, which outputs the length of that string (20). Once a dot is placed after an object, a method is expected. If one isn't provided, the program will search until it hits the next character that isn't whitespace and assumes it's the method (even if it's not valid and breaks the program). If the method does exist, the object will accept the message and invoke it. This convention is a remnant of the Smalltalk language. I think it's neat that, just like any spoken or written language, its conventions, syntax, words, and definitions are often derivative. 

The text says that Ruby has no basic type. For instance, in Java, you'd find the absolute value of a number by calling a separate function that passes in the number, whereas Ruby has absolute value built into the numbers class, so you can send the message `abs` to any number object after defining it. In Ruby, it's being called directly on the number variable like this: `num.abs`, whereas with Java it would be `num = Math.abs(num);`. I think the difference is that, with Java, you have to predefine the effect on a number you want, whereas with Ruby, any number already has these properties baked into it. In that way, Ruby is more flexible. 

On page 18, the text had an example ` intro/puts_examples.rb ` file that I'm not sure was an exercise or not. It seemed more theoretical, especially since the last line wouldn't work without defining `sam` first. I made the same file in this repo, and tried to guess how it would have worked. The text says that `sam` is a variable, and I have `sam` as an instance. Can an instance also technically be a variable? At first I thought, no, it's an object, but then I remembered that EVERYTHING in Ruby is an object, even simple variable assignments to integer values. 

Also, I'm surprised to learn on page 20 that the indentation is not significant. I use tabs and feel emotionally attached to it, but it says the convention is two spaces. I learned that parameters don't need parantheses. I've seen that before and figured it was interchangeable, and it sounds like it doesn't matter but that the convention is to use them unless there is only one argument. I was reminded today that strings are made more than one way, but that the common way is a string literal. I've been absentmindedly assigning string literals for a couple years and I forgot the "literal" part. I learned there is a difference in the quotation marks used: single-quoted does very little, but with double it looks for substitution sequences that start with a backslash character and replaces them with a binary value. I'm not TOTALLY sure what that means (though I know \n represents line breaks). I read about expression interpolation. I've summarized the text below: 

The interpreter looks at a value of the variable `name` and subs it into the string. I also can use, and have used, more involved expressions within #{} braces. There's documentation for idiomatic Ruby style as well, including bits on expression interpolation. We talked about variable scope for local, $global, @instance and @@class. The text says that both class and global variables are seldom used in Ruby programs. Class variables are used more often than global, but are tricky to use safely. There are often easier ways to get similar functionality. Constants start with an uppercase letter. I knew a lot of this but it was a good refresher. 

Someone once criticized my code for having underscores for multi_word_methods, but also CamelCase constants. I'm seeing in this text that that's pretty normal, actually, thank you very much **shakes fist**. Method names can end with ?, !, and = (which is something I learned recently because of Ian's lessons and the methods we worked with for a Lockpick"). 

The difference between collection types Arrays vs Hashes is that an Array is a linear list of objects, starting at index 0, all the way to its end. A hash, on the other hand, is a key/value association where the key helps retrieve its value. Both grow as needed. You can create a new array using an array literal, just a set of elements between square brackets. `a = [1,'cat',3.14,Apple.new]` is valid, assuming there's an Apple class to construct a new instance in the array. Keys in a hash must always be unique. The values can be arrays or even other hashes. Assigning a new value to a key erases the old one. 

I also learned that 'nil' is still an object. It's just a special kind of... NOTHING object. Somehow. I love that. Default behavior of a has indexed by a non-existent key is to return nil. The NOTHING object. Hahaha. Symbols are next. 

I learned that symbols are immutable, though unoptimized strings. They're created once, and are fast to look up. They're used to be keys and identifiers, where the data for a program is a string. I use symbols in my game a lot, though I'm wondering now if I've misappropriated them. Since they don't change, they're often used in hashes according to the text, which is something I definitely employ (so that's good news). Something like `profile[:break]` has a symbol literal for its key. A symbol literal's value is :itself. If you have some symbols but other string literals as keys in your hashes, they can have the same letters, but they'll have different values. 

There was a brief lesson on control structures, including if/elsif/else and while loops. Nothing new here for me. It also breifly talked about using expressions as conditions. I'm also familiar with this. A statement modifier, however, is a new concept for me as far as terminology goes. I am familiar with writing things like: 

```
if radiation > 3000
	puts "Danger, Will Robinson"
end
``` 

as 

``` 
puts "Danger, Will Robinson" if radiation > 3000
```

Admittedly, this is a newer concept I recently found out about. So, it's worth digesting: a statement modifier is a shortcut if the body of a controlled structure is a single expression (like the above). It is worth noting that doing this with a while loop (like below) is less common: 

```
square = square * square while square < 1000
```

Regular expressions are used for pattern matching strings. I've never used these before, and am just learning about them, so bear with me! An example pattern that looks for anything containing "Ruby" or "Rust" could be

```
/Ruby|Rust/
```

The pipe character means either the thing on the left or the thing on the right. I knew this. The forward slashes delimit the pattern contained inside. It's really cool to learn that you can use parentheses within these patterns. The following would do the same as the above: 

```
/Ru(by|st)/
```

It would check for any "Ru" values followed by either "by" | "st". That's neat as heck. I bet I could find a way to incorporate that into Bone Crawl somehow. You can check for repetition by adding a + operator after the letter. * can also be used after the letter in question, to say "any at all, or none". You can also pattern match based on a certain group of character classes, like whitespace characters or digits. This stuff is a little over my head, so I think I'm going to look for some external tutorials on it. Unless you have some ideas for puzzles! 

Okay, back to some things I know a bit about. Blocks are chunks of code that can be passed to a method, as if it were another parameter. I've delimited them using braces as well as do and end. I learned that the braces "bind more tightly" than the do/end pairs (whatever that means--it says it will almost never make a difference in my code). Single line blocks conventionally use braces, where as multiline blocks typically use the do/end pairs. 

Something new I'm going to have to learn more about, is that you can pass a block as an argument to any method call. You can pop it next to a method with a parameter, like this: ` some_method { puts "SUP" } `. I'm not totally sure the implications or why this would be helpful yet, but I'm sure I'll be able to get some real world experience with it soon. What I know from the text is that the method can invoke the block many times if it wants to, by using the `yield` statement. This is also something totally foreign to me. The `yield` statement invokes the block that was passed to the method, passing the control to the code inside the block. That last sentence is verbatim from the text. I cannot figure out what it means yet, but I'm going to do the exercise when I get back from Taco Bell. BRB. 

####################################

Back. So, I'm interpreting that sentence from earlier as: The block is a second method that can be passed (or invoked) by the first. I ran the first example through an interpreter, and played around a little bit. The code in the block is executed each time `yield` is called. I think that "passing control" is the part I struggled with, but now I see that it means, at the start of the method, the method itself is in control. But, when `yield` is called, just like the literal word can mean, the method YIELDS its control to defer instead to what is INSIDE the block (curly braces). It's like method chaining, kind of? 

I learned that the act of doing something similar to all objects in a collection (like an array or hash) is called enumeration. Other languages call it "iteration", which I have picked up from reading Stack Overflow. When I'm using the each method, I am iterating over a block or array. After this section, the text covered input and output, which I'm familiar with. I use gets regularly, but didn't realize it was short for "get string". Cool context to have now :-) 

I'm abl eto pass arguments when I run a program from the command line. I guess there's a global array called ARGV built-in. I did the exercise and can verify why it works. The global array that's built into the language accepts any number of arguments in the command line. Usually, according to the text, these arguments are other files. 

I learned about "magic comments" that have to go at the beginning of a program. They have #directive: value, and always have to appear before any actual Ruby code. These magic comments can affect multiple elements of a program. I've used flags in my code before, and it sounds like this is similar. You can use a #warn_indent: BOOLEAN flag to show where indentation is mismatched. That's similar to when I run a program like `ruby main.rb -w` to ask for syntax warnings. 















Need to learn more Regular Expressions

